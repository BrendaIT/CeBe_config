#####################################################################
# 	Macros
#####################################################################

[gcode_macro G32]
gcode:
  BED_MESH_CLEAR
  SET_VELOCITY_LIMIT ACCEL=4000
  G28
  QUAD_GANTRY_LEVEL
  G28
  G0 X150 Y150 Z20 F6000

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if 'warnings' not in printer.configfile %}
      {action_respond_info("klipper to old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}

[gcode_macro STANDBY]
description: Switch everything off.
gcode:
  	TURN_OFF_HEATERS
    M107
	M84
	LED_DARK

#
# AB_SPEED_TEST SPEED=100 REPEAT=1 ACCEL=4000 ACCEL_TO_DECEL=2000
#
[gcode_macro AB_SPEED_TEST]
gcode:
  {% set speed  = params.SPEED|default(100)|int %}
  {% set repeat = params.REPEAT|default(1)|int %}
  {% set accel  = params.ACCEL|default(printer.configfile.config['printer'].max_accel|int)|int %}
  {% set accel_to_decel = params.ACCEL_TO_DECEL|default(accel/2)|int %}
  
  {% set prev_accel = printer.configfile.config['printer'].max_accel|int %}
  {% set min_x = 10 %}
  {% set min_y = 10 %}
  {% set max_x = printer.toolhead.axis_maximum.x - 10 %}
  {% set max_y = printer.toolhead.axis_maximum.y - 10 %}
  
  SAVE_GCODE_STATE NAME=STATE_ab_speed_test
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

  G28 X Y 
  GET_POSITION
  # starting position
  G90
  G0 X{max_x} Y{max_y} Z10 F{200 * 60}

  {% for _ in range(repeat) %}
        G1 X{min_x} Y{min_y} F{speed * 60}
        G1 X{max_x} Y{max_y} F{speed * 60}

        G1 X{min_x} Y{max_y} F{speed * 60}

        G1 X{max_x} Y{min_y} F{speed * 60}
        G1 X{min_x} Y{max_y} F{speed * 60}

        G1 X{max_x} Y{max_y} F{speed * 60}
        G1 X{max_x} Y{min_y} F{speed * 60}
        G1 X{min_x} Y{min_y} F{speed * 60}
        G1 X{min_x} Y{max_y} F{speed * 60}
        G1 X{max_x} Y{max_y} F{speed * 60}

  {% endfor %}

  # restore accel
  SET_VELOCITY_LIMIT ACCEL={prev_accel}
  
  # we may be skipping steps at this point, re-home X and Y for safety
  G28 X Y
  GET_POSITION
  
  RESTORE_GCODE_STATE NAME=STATE_ab_speed_test

[gcode_macro test]
gcode:
	{action_respond_info(printer.gcode_move.position.z|string)}

[gcode_macro BED_MESH_AREA]

; minimum probe count
variable_min_probe_count : 3

gcode:
    {% set max_probe_point_distance = params.MAX_DISTANCE|default(25.0)|float %} ; the maximum distance between two probe points 
    {% set mesh_area_offset = params.MAX_DISTANCE|default(5.0)|float %}     ; the clearance between print area and probe area 

    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

    {% set area_min_x = params.MIN_X|default(safe_min_x)|float %}
	{% set area_min_y = params.MIN_Y|default(safe_min_y)|float %}
	{% set area_max_x = params.MAX_X|default(safe_max_x)|float %}
	{% set area_max_y = params.MAX_Y|default(safe_max_y)|float %}

    {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|float %}
    {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|float %}

    {% set area_min_x = [area_min_x - mesh_area_offset, safe_min_x]|max  %}
    {% set area_min_y = [area_min_y - mesh_area_offset, safe_min_y]|max  %}
    {% set area_max_x = [area_max_x + mesh_area_offset, safe_max_x]|min  %}
    {% set area_max_y = [area_max_y + mesh_area_offset, safe_max_y]|min  %}

    { action_respond_info( "Start: " + area_min_x|string + "," + area_min_y|string ) }
    { action_respond_info( "End:   " + area_max_x|string + "," + area_max_y|string ) }

    {% set points_x = (((area_max_x - area_min_x) / ( 2 * max_probe_point_distance)) | int) * 2 + 1 %}
    {% set points_y = (((area_max_y - area_min_y) / ( 2* max_probe_point_distance)) | int) * 2 + 1 %}
    
    {% set points_x = [points_x, min_probe_count]|max  %}
    {% set points_y = [points_y, min_probe_count]|max  %}

    { action_respond_info( "Points: x:" + points_x|string + " y:" + points_y|string ) }

    {% set ref_index = (points_x * points_y / 2) | int %}
    { action_respond_info( "Reference index: " + ref_index|string) }

    BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={points_x},{points_y} relative_reference_index={ref_index}

